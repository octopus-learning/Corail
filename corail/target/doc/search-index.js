var N = null;var searchIndex = {};
searchIndex["corail"]={"doc":"","items":[],"paths":[]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a…","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a…",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant…",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant…",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying…",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of…",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant…",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant…",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which…",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more…",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"deref","","",0,N],[11,"from","","",0,[[["result"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"deref_mut","","",0,N],[11,"hash","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"as_mut","","",0,[[["self"]],["str"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,N],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,N],[11,"into","","",0,[[["self"]],["result"]]]],"paths":[[4,"Either"]]};
searchIndex["itertools"]={"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a…",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[4,"Diff","","A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch","","The index of the first non-matching element along with…",1,N],[13,"Shorter","","The total number of elements that were in `J` along with…",1,N],[13,"Longer","","The total number of elements that were in `I` along with…",1,N],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See…",N,N],[13,"NoElements","","Empty iterator",2,N],[13,"OneElement","","Iterator with one element, so the minimum and maximum are…",2,N],[13,"MinMax","","More than one element in the iterator, the first element…",2,N],[4,"Position","","A value yielded by `WithPosition`. Indicates the position…",N,N],[13,"First","","This is the first element.",3,N],[13,"Middle","","This is neither the first nor the last element.",3,N],[13,"Last","","This is the last element.",3,N],[13,"Only","","This is the only element.",3,N],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",N,N],[13,"Both","","Both values are present.",4,N],[13,"Left","","Only the left value of type `A` is present.",4,N],[13,"Right","","Only the right value of type `B` is present.",4,N],[4,"FoldWhile","","An enum used for controlling the execution of…",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"flatten","","Flatten an iterable of iterables into a single combined…",N,[[["i"]],["flatten"]]],[5,"concat","","Combine all an iterator's elements into one element by…",N,N],[5,"cons_tuples","","Create an iterator that maps for example iterators of…",N,[[["i"]],["constuples"]]],[5,"diff_with","","Compares every element yielded by both `i` and `j` with…",N,[[["i"],["j"],["f"]],["option",["diff"]]]],[5,"process_results","","“Lift” a function of the values of an iterator so that it…",N,[[["i"],["f"]],["result"]]],[5,"repeat_n","","Create an iterator that produces `n` repetitions of…",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by…",N,[[["f"]],["repeatcall"]]],[5,"unfold","","Creates a new unfold source with the specified closure as…",N,[[["st"],["f"]],["unfold"]]],[5,"iterate","","Creates a new iterator that infinitely applies function to…",N,[[["st"],["f"]],["iterate"]]],[5,"multizip","","An iterator that generalizes .zip() and allows running…",N,[[["u"]],["zip"]]],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",N,[[["i"],["j"]],["interleave"]]],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",N,[[["i"],["j"]],["merge"]]],[5,"put_back","","Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"zip_eq","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zipeq"]]],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the…",N,[[["i"],["j"],["f"]],["mergejoinby"]]],[5,"enumerate","","Iterate `iterable` with a running index.",N,[[["i"]],["enumerate"]]],[5,"rev","","Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zip"]]],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",N,[[["i"],["j"]],["chain"]]],[5,"cloned","","Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold","","Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all","","Test whether the predicate holds for all elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"any","","Test whether the predicate holds for any elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"max","","Return the maximum value of the iterable.",N,[[["i"]],["option"]]],[5,"min","","Return the minimum value of the iterable.",N,[[["i"]],["option"]]],[5,"equal","","Return `true` if both iterables produce equal sequences…",N,[[["i"],["j"]],["bool"]]],[5,"assert_equal","","Assert that two iterables produce equal sequences, with…",N,[[["i"],["j"]]]],[5,"partition","","Partition a sequence using predicate `pred` so that…",N,[[["i"],["f"]],["usize"]]],[0,"structs","","The concrete iterator types.",N,N],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",N,N],[3,"Interleave","","An iterator adaptor that alternates elements from two…",N,N],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two…",N,N],[3,"Product","","An iterator adaptor that iterates over the cartesian…",N,N],[3,"PutBack","","An iterator adaptor that allows putting back a single item…",N,N],[3,"Batching","","A “meta iterator adaptor”. Its closure receives a…",N,N],[3,"Step","","An iterator adaptor that steps a number elements in the…",N,N],[3,"MapResults","","An iterator adapter to apply a transformation within a…",N,N],[3,"Merge","","An iterator adaptor that merges the two base iterators in…",N,N],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in…",N,N],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able…",N,N],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator…",N,N],[3,"Coalesce","","An iterator adaptor that may join together adjacent…",N,N],[3,"TupleCombinations","","An iterator to iterate through all combinations in a…",N,N],[3,"Flatten","","An iterator adapter to simply flatten a structure.",N,N],[3,"Positions","","An iterator adapter to get the positions of each element…",N,N],[3,"Update","","An iterator adapter to apply a mutating function to each…",N,N],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B),…",N,N],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"Intersperse","","An iterator adaptor to insert a particular value between…",N,N],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two…",N,N],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum…",N,N],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure…",N,N],[3,"ProcessResults","","An iterator that produces only the `T` values as long as…",N,N],[3,"RepeatN","","An iterator that produces n repetitions of an element.",N,N],[3,"RepeatCall","","See `repeat_call` for more information.",N,N],[3,"Unfold","","See `unfold` for more information.",N,N],[12,"state","","Internal state that will be passed to the closure on the…",6,N],[3,"Iterate","","An iterator that infinitely applies function to value and…",N,N],[3,"TupleBuffer","","An iterator over a incomplete tuple.",N,N],[3,"TupleWindows","","An iterator over all contiguous windows that produces…",N,N],[3,"Tuples","","An iterator that groups the items in tuples of a specific…",N,N],[3,"WithPosition","","An iterator adaptor that wraps each element in an…",N,N],[3,"ZipEq","","An iterator which iterates two other iterators…",N,N],[3,"ZipLongest","","An iterator which iterates two other iterators…",N,N],[3,"Zip","","See `multizip` for more information.",N,N],[11,"with_value","","put back value `value` (builder method)",7,N],[11,"into_parts","","Split the `PutBack` into its parts.",7,N],[11,"put_back","","Put back a single value to the front of the iterator.",7,N],[11,"has_left","itertools","If `Left`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,"has_right","","If `Right`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,"left","","If `Left`, or `Both`, return `Some` with the left value,…",4,[[["self"]],["option"]]],[11,"right","","If `Right`, or `Both`, return `Some` with the right value,…",4,[[["self"]],["option"]]],[11,"as_ref","","Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A,…",4,[[["self"]],["eitherorboth"]]],[11,"as_mut","","Converts from `&mut EitherOrBoth<A, B>` to…",4,[[["self"]],["eitherorboth"]]],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The…",2,[[["self"]],["option"]]],[11,"into_buffer","itertools::structs","Return a buffer with the produced items that was not…",8,[[["self"]],["tuplebuffer"]]],[11,"into_inner","itertools","Return the inner value.",3,[[["self"]],["t"]]],[8,"PeekingNext","","An iterator that allows peeking at an element before…",N,N],[10,"peeking_next","","Pass a reference to the next iterator element to the…",9,[[["self"],["f"]],["option"]]],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods…",N,N],[11,"interleave","","Alternate elements from two iterators until both have run…",10,[[["self"],["j"]],["interleave"]]],[11,"interleave_shortest","","Alternate elements from two iterators until at least one…",10,[[["self"],["j"]],["interleaveshortest"]]],[11,"intersperse","","An iterator adaptor to insert a particular value between…",10,N],[11,"zip_longest","","Create an iterator which iterates over both this and the…",10,[[["self"],["j"]],["ziplongest"]]],[11,"zip_eq","","Create an iterator which iterates over both this and the…",10,[[["self"],["j"]],["zipeq"]]],[11,"batching","","A “meta iterator adaptor”. Its closure receives a…",10,[[["self"],["f"]],["batching"]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing…",10,[[["self"]],["tuplewindows"]]],[11,"tuples","","Return an iterator that groups the items in tuples of a…",10,[[["self"]],["tuples"]]],[11,"step","","Return an iterator adaptor that steps `n` elements in the…",10,[[["self"],["usize"]],["step"]]],[11,"map_results","","Return an iterator adaptor that applies the provided…",10,[[["self"],["f"]],["mapresults"]]],[11,"merge","","Return an iterator adaptor that merges the two base…",10,[[["self"],["j"]],["merge"]]],[11,"merge_by","","Return an iterator adaptor that merges the two base…",10,[[["self"],["j"],["f"]],["mergeby"]]],[11,"merge_join_by","","Create an iterator that merges items from both this and…",10,[[["self"],["j"],["f"]],["mergejoinby"]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the…",10,[[["self"],["j"]],["product"]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure…",10,[[["self"],["f"]],["coalesce"]]],[11,"dedup","","Remove duplicates from sections of consecutive identical…",10,[[["self"]],["dedup"]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator…",10,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a…",10,[[["self"],["f"]],["takewhileref"]]],[11,"while_some","","Return an iterator adaptor that filters `Option<A>`…",10,[[["self"]],["whilesome"]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the…",10,[[["self"]],["tuplecombinations"]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a…",10,[[["self"],["usize"],["f"]],["padusing"]]],[11,"flatten","","Flatten an iterator of iterables into a single combined…",10,[[["self"]],["flatten"]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a…",10,[[["self"]],["withposition"]]],[11,"positions","","Return an iterator adaptor that yields the indices of all…",10,[[["self"],["p"]],["positions"]]],[11,"update","","Return an iterator adaptor that applies a mutating…",10,[[["self"],["f"]],["update"]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped…",10,[[["self"]],["option"]]],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a…",10,[[["self"]],["option"]]],[11,"find_position","","Find the position and value of the first element…",10,[[["self"],["p"]],["option"]]],[11,"all_equal","","Check whether all elements compare equal.",10,[[["self"]],["bool"]]],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,…",10,[[["self"],["usize"]],["self"]]],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,…",10,[[["self"],["usize"]],["self"]]],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",10,[[["self"],["f"]]]],[11,"concat","","Combine all an iterator's elements into one element by…",10,N],[11,"set_from","","Assign to each reference in `self` from the `from`…",10,[[["self"],["j"]],["usize"]]],[11,"format","","Format all iterator elements, separated by `sep`.",10,[[["self"],["str"]],["format"]]],[11,"format_with","","Format all iterator elements, separated by `sep`.",10,[[["self"],["str"],["f"]],["formatwith"]]],[11,"fold_results","","Fold `Result` values from an iterator.",10,[[["self"],["b"],["f"]],["result"]]],[11,"fold_options","","Fold `Option` values from an iterator.",10,[[["self"],["b"],["f"]],["option"]]],[11,"fold1","","Accumulator of the elements in the iterator.",10,[[["self"],["f"]],["option"]]],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like…",10,[[["self"],["f"]],["option"]]],[11,"fold_while","","An iterator method that applies a function, producing a…",10,[[["self"],["b"],["f"]],["foldwhile"]]],[11,"partition_map","","Collect all iterator elements into one of two partitions.…",10,N],[11,"minmax","","Return the minimum and maximum elements in the iterator.",10,[[["self"]],["minmaxresult"]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as…",10,[[["self"],["f"]],["minmaxresult"]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as…",10,[[["self"],["f"]],["minmaxresult"]]],[11,"into_inner","","Return the value in the continue or done.",5,[[["self"]],["t"]]],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct","","Create an iterator over the “cartesian product” of…",N,N],[14,"izip","","Create an iterator running multiple iterators in lockstep.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","itertools::structs","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into_iter","","",23,[[["self"]],["i"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into_iter","","",24,[[["self"]],["i"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into_iter","","",25,[[["self"]],["i"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into_iter","","",26,[[["self"]],["i"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into_iter","","",27,[[["self"]],["i"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into_iter","","",35,[[["self"]],["i"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into_iter","","",38,[[["self"]],["i"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into_iter","","",39,[[["self"]],["i"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"into_iter","","",40,[[["self"]],["i"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into_iter","","",41,[[["self"]],["i"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into_iter","","",42,[[["self"]],["i"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into_iter","","",43,[[["self"]],["i"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"as_ref","itertools","",0,N],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"extend","","",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"from","","",0,[[["result"]],["either"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",0,N],[11,"hash","","",0,N],[11,"deref_mut","","",0,N],[11,"as_mut","","",0,[[["self"]],["str"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"peeking_next","itertools::structs","",7,[[["self"],["f"]],["option"]]],[11,"from","","",43,N],[11,"from","","",43,N],[11,"from","","",43,N],[11,"from","","",43,N],[11,"from","","",43,N],[11,"from","","",43,N],[11,"from","","",43,N],[11,"from","","",43,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","itertools","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","itertools::structs","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","itertools","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","itertools::structs","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","itertools","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","itertools::structs","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","itertools","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"ne","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"eq","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[11,"ne","","",3,[[["self"],["position"]],["bool"]]],[11,"eq","","",5,[[["self"],["foldwhile"]],["bool"]]],[11,"ne","","",5,[[["self"],["foldwhile"]],["bool"]]],[11,"next_back","itertools::structs","",25,[[["self"]],["option"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next_back","","",27,[[["self"]],["option"]]],[11,"next_back","","",27,[[["self"]],["option"]]],[11,"next_back","","",27,[[["self"]],["option"]]],[11,"next_back","","",27,[[["self"]],["option"]]],[11,"next_back","","",27,[[["self"]],["option"]]],[11,"next_back","","",27,[[["self"]],["option"]]],[11,"next_back","","",32,[[["self"]],["option"]]],[11,"next_back","","",35,[[["self"]],["option"]]],[11,"next_back","","",42,[[["self"]],["option"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"all","","",7,[[["self"],["g"]],["bool"]]],[11,"fold","","",7,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"fold","","",14,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"fold","","",11,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"next","","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,N],[11,"next","","",23,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"fold","","",24,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"fold","","",17,[[["self"],["acc"],["fold"]],["acc"]]],[11,"collect","","",17,[[["self"]],["c"]]],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,N],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["g"]],["acc"]]],[11,"collect","","",26,[[["self"]],["c"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"fold","","",27,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"fold","","",27,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"fold","","",27,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"fold","","",27,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"fold","","",27,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"fold","","",27,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"size_hint","","",30,N],[11,"next","","",31,[[["self"]],["option"]]],[11,"size_hint","","",31,N],[11,"next","","",32,[[["self"]],["option"]]],[11,"size_hint","","",32,N],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"next","","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,N],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"next","","",36,[[["self"]],["option"]]],[11,"size_hint","","",36,N],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,N],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"next","","",8,[[["self"]],["option"]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"next","","",42,[[["self"]],["option"]]],[11,"size_hint","","",42,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["interleave"]]],[11,"clone","","",13,[[["self"]],["interleaveshortest"]]],[11,"clone","","",7,[[["self"]],["putback"]]],[11,"clone","","",14,[[["self"]],["product"]]],[11,"clone","","",15,[[["self"]],["batching"]]],[11,"clone","","",16,[[["self"]],["step"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"clone","","",21,[[["self"]],["whilesome"]]],[11,"clone","","",24,[[["self"]],["flatten"]]],[11,"clone","itertools","",4,[[["self"]],["eitherorboth"]]],[11,"clone","itertools::structs","",27,[[["self"]],["self"]]],[11,"clone","","",28,[[["self"]],["format"]]],[11,"clone","","",30,[[["self"]],["intersperse"]]],[11,"clone","itertools","",2,[[["self"]],["minmaxresult"]]],[11,"clone","itertools::structs","",32,[[["self"]],["padusing"]]],[11,"clone","","",6,[[["self"]],["unfold"]]],[11,"clone","","",37,[[["self"]],["iterate"]]],[11,"clone","itertools","",3,[[["self"]],["position"]]],[11,"clone","itertools::structs","",41,[[["self"]],["zipeq"]]],[11,"clone","","",42,[[["self"]],["ziplongest"]]],[11,"clone","","",43,[[["self"]],["zip"]]],[11,"clone","itertools","",5,[[["self"]],["foldwhile"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant…",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant…",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying…",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of…",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant…",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant…",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"Unfold"],[3,"PutBack"],[3,"Tuples"],[8,"PeekingNext"],[8,"Itertools"],[3,"Dedup"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"MapResults"],[3,"Merge"],[3,"MergeBy"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Coalesce"],[3,"TupleCombinations"],[3,"Flatten"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Intersperse"],[3,"MergeJoinBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"TupleBuffer"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"]]};
searchIndex["matrixmultiply"]={"doc":"General matrix multiplication for f32, f64 matrices.","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",N,N],[5,"dgemm","","General matrix multiplication (f64)",N,N]],"paths":[]};
searchIndex["ndarray"]={"doc":"The `ndarray` crate provides an n-dimensional container…","items":[[3,"Axis","ndarray","An axis index.",N,N],[12,"0","","",0,N],[3,"AxisDescription","","Description of the axis, its length and its stride.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[12,"2","","",1,N],[3,"Dim","","Dimension description.",N,N],[3,"IxDynImpl","","Dynamic dimension or index type.",N,N],[3,"ShapeError","","An error related to array shape or layout.",N,N],[3,"Slice","","A slice (range with step size).",N,N],[12,"start","","",2,N],[12,"end","","",2,N],[12,"step","","",2,N],[3,"SliceInfo","","Represents all of the necessary information to perform a…",N,N],[3,"Zip","","Lock step function application across several arrays or…",N,N],[3,"ArrayBase","","An n-dimensional array.",N,N],[3,"OwnedRepr","","Array's representation.",N,N],[3,"OwnedArcRepr","","ArcArray's representation.",N,N],[3,"ViewRepr","","Array view’s representation.",N,N],[3,"Shape","","A contiguous array shape of n dimensions.",N,N],[3,"StrideShape","","An array shape of n dimensions in c-order, f-order or…",N,N],[4,"ErrorKind","","Error code for an error related to array shape or layout.",N,N],[13,"IncompatibleShape","","incompatible shape",3,N],[13,"IncompatibleLayout","","incompatible memory layout",3,N],[13,"RangeLimited","","the shape does not fit inside type limits",3,N],[13,"OutOfBounds","","out of bounds indexing",3,N],[13,"Unsupported","","aliasing array elements",3,N],[13,"Overflow","","overflow when computing offset, length, etc.",3,N],[4,"SliceOrIndex","","A slice (range with step) or an index.",N,N],[13,"Slice","","A range with step size. `end` is an exclusive index.…",4,N],[12,"start","ndarray::SliceOrIndex","",4,N],[12,"end","","",4,N],[12,"step","","",4,N],[13,"Index","ndarray","A single index.",4,N],[4,"FoldWhile","","Value controlling the execution of `.fold_while` on `Zip`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"Dim","","Create a new dimension value.",N,N],[5,"indices","","Create an iterable of the array shape `shape`.",N,[[["e"]],["indices"]]],[5,"indices_of","","Return an iterable of the indices of the passed-in array.",N,[[["arraybase"]],["indices"]]],[5,"stack","","Stack arrays along the given axis.",N,N],[5,"Ix0","","Create a zero-dimensional index",N,[[],["ix0"]]],[5,"Ix1","","Create a one-dimensional index",N,[[["ix"]],["ix1"]]],[5,"Ix2","","Create a two-dimensional index",N,[[["ix"],["ix"]],["ix2"]]],[5,"Ix3","","Create a three-dimensional index",N,[[["ix"],["ix"],["ix"]],["ix3"]]],[5,"Ix4","","Create a four-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"]],["ix4"]]],[5,"Ix5","","Create a five-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"],["ix"]],["ix5"]]],[5,"Ix6","","Create a six-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"],["ix"],["ix"]],["ix6"]]],[5,"IxDyn","","Create a dynamic-dimensional index",N,N],[5,"arr0","","Create a zero-dimensional array with the element `x`.",N,[[["a"]],["array0"]]],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",N,N],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",N,N],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",N,[[["a"]],["arrayview0"]]],[5,"aview1","","Create a one-dimensional array view with elements…",N,N],[5,"aview2","","Create a two-dimensional array view with elements…",N,N],[5,"aview_mut1","","Create a one-dimensional read-write array view with…",N,N],[5,"aview_mut2","","Create a two-dimensional read-write array view with…",N,N],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",N,N],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",N,N],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",N,N],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",N,N],[11,"index","","Return the index of the axis.",0,[[["self"]],["usize"]]],[11,"axis","","Return axis",1,[[["self"]],["axis"]]],[11,"len","","Return length",1,[[["self"]],["ix"]]],[11,"stride","","Return stride",1,[[["self"]],["ixs"]]],[0,"iter","","Producers, iterables and iterators.",N,N],[3,"Axes","ndarray::iter","An iterator over the length and stride of each axis of an…",N,N],[3,"Indices","","Indices producer and iterable.",N,N],[3,"IndicesIter","","An iterator over the indexes of an array shape.",N,N],[3,"Iter","","An iterator over the elements of an array.",N,N],[3,"IterMut","","An iterator over the elements of an array (mutable).",N,N],[3,"IndexedIter","","An iterator over the indexes and elements of an array.",N,N],[3,"IndexedIterMut","","An iterator over the indexes and elements of an array…",N,N],[3,"Lanes","","See `.lanes()` for more information.",N,N],[3,"LanesMut","","See `.lanes_mut()` for more information.",N,N],[3,"LanesIter","","An iterator that traverses over all axes but one, and…",N,N],[3,"LanesIterMut","","An iterator that traverses over all dimensions but the…",N,N],[3,"AxisIter","","An iterator that traverses over an axis and and yields…",N,N],[3,"AxisIterMut","","An iterator that traverses over an axis and and yields…",N,N],[3,"AxisChunksIter","","An iterator that traverses over the specified axis and…",N,N],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis and…",N,N],[3,"ExactChunks","","Exact chunks producer and iterable.",N,N],[3,"ExactChunksIter","","Exact chunks iterator.",N,N],[3,"ExactChunksMut","","Exact chunks producer and iterable.",N,N],[3,"ExactChunksIterMut","","Exact chunks iterator.",N,N],[3,"Windows","","Window producer and iterable",N,N],[11,"new","ndarray","Create a new `Slice` with the given extents.",2,[[["isize"],["option",["isize"]],["isize"]],["slice"]]],[11,"step_by","","Create a new `Slice` with the given step size (multiplied…",2,[[["self"],["isize"]],["self"]]],[11,"is_slice","","Returns `true` if `self` is a `Slice` value.",4,[[["self"]],["bool"]]],[11,"is_index","","Returns `true` if `self` is an `Index` value.",4,[[["self"]],["bool"]]],[11,"step_by","","Returns a new `SliceOrIndex` with the given step size…",4,[[["self"],["isize"]],["self"]]],[11,"new","","Returns a new `SliceInfo` instance.",6,[[["t"]],["result",["sliceinfo","shapeerror"]]]],[11,"out_ndim","","Returns the number of dimensions after calling `.slice()`…",6,[[["self"]],["usize"]]],[11,"split_at","ndarray::iter","Split the iterator at index, yielding two disjoint…",7,N],[11,"split_at","","Split the iterator at index, yielding two disjoint…",8,N],[11,"kind","ndarray","Return the `ErrorKind` of this error.",9,[[["self"]],["errorkind"]]],[11,"from_kind","","Create a new `ShapeError`",9,[[["errorkind"]],["self"]]],[11,"size","","Return the size of the shape in number of elements",10,[[["self"]],["usize"]]],[11,"from","","Create a new `Zip` from the input array or other producer…",11,[[["ip"]],["self"]]],[11,"indexed","","Create a new `Zip` with an index producer and the producer…",11,[[["ip"]],["self"]]],[11,"size","","Return a the number of element tuples in the Zip",11,[[["self"]],["usize"]]],[11,"apply","","Apply a function to all elements of the input arrays,…",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays,…",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays,…",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays,…",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays,…",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays,…",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays,…",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays,…",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays,…",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays,…",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays,…",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays,…",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"into_inner","","Return the inner value",5,[[["self"]],["t"]]],[11,"is_done","","Return true if it is `Done`, false if `Continue`",5,[[["self"]],["bool"]]],[0,"prelude","","ndarray prelude.",N,N],[11,"from_vec","","Create a one-dimensional array from a vector (no copying…",12,[[["vec"]],["self"]]],[11,"from_iter","","Create a one-dimensional array from an iterable.",12,[[["i"]],["self"]]],[11,"linspace","","Create a one-dimensional array from the inclusive interval…",12,[[["a"],["a"],["usize"]],["self"]]],[11,"range","","Create a one-dimensional array from the half-open interval…",12,[[["a"],["a"],["a"]],["self"]]],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",12,[[["ix"]],["self"]]],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",12,[[["sh"],["a"]],["self"]]],[11,"zeros","","Create an array with zeros, shape `shape`.",12,[[["sh"]],["self"]]],[11,"ones","","Create an array with ones, shape `shape`.",12,[[["sh"]],["self"]]],[11,"default","","Create an array with default values, shape `shape`",12,[[["sh"]],["self"]]],[11,"from_shape_fn","","Create an array with values created by the function `f`.",12,[[["sh"],["f"]],["self"]]],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No…",12,[[["sh"],["vec"]],["result",["shapeerror"]]]],[11,"from_shape_vec_unchecked","","Creates an array from a vector and interpret it according…",12,[[["sh"],["vec"]],["self"]]],[11,"uninitialized","","Create an array with uninitalized elements, shape `shape`.",12,[[["sh"]],["self"]]],[11,"len","","Return the total number of elements in the array.",12,[[["self"]],["usize"]]],[11,"len_of","","Return the length of `axis`.",12,[[["self"],["axis"]],["usize"]]],[11,"is_empty","","Return whether the array has any elements",12,[[["self"]],["bool"]]],[11,"ndim","","Return the number of dimensions (axes) in the array",12,[[["self"]],["usize"]]],[11,"dim","","Return the shape of the array in its “pattern” form, an…",12,N],[11,"raw_dim","","Return the shape of the array as it stored in the array.",12,[[["self"]],["d"]]],[11,"shape","","Return the shape of the array as a slice.",12,N],[11,"strides","","Return the strides of the array as a slice",12,N],[11,"stride_of","","Return the stride of `axis`.",12,[[["self"],["axis"]],["isize"]]],[11,"view","","Return a read-only view of the array",12,[[["self"]],["arrayview"]]],[11,"view_mut","","Return a read-write view of the array",12,[[["self"]],["arrayviewmut"]]],[11,"to_owned","","Return an uniquely owned copy of the array.",12,[[["self"]],["array"]]],[11,"to_shared","","Return a shared ownership (copy on write) array.",12,[[["self"]],["arcarray"]]],[11,"into_owned","","Turn the array into a uniquely owned array, cloning the…",12,[[["self"]],["array"]]],[11,"into_shared","","Turn the array into a shared ownership (copy on write)…",12,[[["self"]],["arcarray"]]],[11,"first","","Returns a reference to the first element of the array, or…",12,[[["self"]],["option"]]],[11,"first_mut","","Returns a mutable reference to the first element of the…",12,[[["self"]],["option"]]],[11,"iter","","Return an iterator of references to the elements of the…",12,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator of mutable references to the elements…",12,[[["self"]],["itermut"]]],[11,"indexed_iter","","Return an iterator of indexes and references to the…",12,[[["self"]],["indexediter"]]],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to…",12,[[["self"]],["indexeditermut"]]],[11,"slice","","Return a sliced view of the array.",12,[[["self"],["sliceinfo"]],["arrayview"]]],[11,"slice_mut","","Return a sliced read-write view of the array.",12,[[["self"],["sliceinfo"]],["arrayviewmut"]]],[11,"slice_move","","Slice the array, possibly changing the number of dimensions.",12,[[["self"],["sliceinfo"]],["arraybase"]]],[11,"slice_collapse","","Slice the array in place without changing the number of…",12,N],[11,"slice_inplace","","Slice the array in place without changing the number of…",12,N],[11,"slice_axis","","Return a view of the array, sliced along the specified axis.",12,[[["self"],["axis"],["slice"]],["arrayview"]]],[11,"slice_axis_mut","","Return a mutable view of the array, sliced along the…",12,[[["self"],["axis"],["slice"]],["arrayviewmut"]]],[11,"slice_axis_inplace","","Slice the array in place along the specified axis.",12,[[["self"],["axis"],["slice"]]]],[11,"get","","Return a reference to the element at `index`, or return…",12,[[["self"],["i"]],["option"]]],[11,"get_mut","","Return a mutable reference to the element at `index`, or…",12,[[["self"],["i"]],["option"]]],[11,"uget","","Perform unchecked array indexing.",12,[[["self"],["i"]],["a"]]],[11,"uget_mut","","Perform unchecked array indexing.",12,[[["self"],["i"]],["a"]]],[11,"swap","","Swap elements at indices `index1` and `index2`.",12,[[["self"],["i"],["i"]]]],[11,"uswap","","Swap elements unchecked at indices `index1` and `index2`.",12,[[["self"],["i"],["i"]]]],[11,"index_axis","","Returns a view restricted to `index` along the axis, with…",12,[[["self"],["axis"],["usize"]],["arrayview"]]],[11,"index_axis_mut","","Returns a mutable view restricted to `index` along the…",12,[[["self"],["axis"],["usize"]],["arrayviewmut"]]],[11,"index_axis_move","","Collapses the array to `index` along the axis and removes…",12,[[["self"],["axis"],["usize"]],["arraybase"]]],[11,"collapse_axis","","Selects `index` along the axis, collapsing the axis into…",12,[[["self"],["axis"],["usize"]]]],[11,"subview","","Along `axis`, select the subview `index` and return a view…",12,[[["self"],["axis"],["ix"]],["arrayview"]]],[11,"subview_mut","","Along `axis`, select the subview `index` and return a…",12,[[["self"],["axis"],["ix"]],["arrayviewmut"]]],[11,"subview_inplace","","Collapse dimension `axis` into length one, and select the…",12,[[["self"],["axis"],["ix"]]]],[11,"into_subview","","Along `axis`, select the subview `index` and return `self`…",12,[[["self"],["axis"],["ix"]],["arraybase"]]],[11,"select","","Along `axis`, select arbitrary subviews corresponding to…",12,N],[11,"genrows","","Return a producer and iterable that traverses over the…",12,[[["self"]],["lanes"]]],[11,"genrows_mut","","Return a producer and iterable that traverses over the…",12,[[["self"]],["lanesmut"]]],[11,"gencolumns","","Return a producer and iterable that traverses over the…",12,[[["self"]],["lanes"]]],[11,"gencolumns_mut","","Return a producer and iterable that traverses over the…",12,[[["self"]],["lanesmut"]]],[11,"lanes","","Return a producer and iterable that traverses over all 1D…",12,[[["self"],["axis"]],["lanes"]]],[11,"lanes_mut","","Return a producer and iterable that traverses over all 1D…",12,[[["self"],["axis"]],["lanesmut"]]],[11,"outer_iter","","Return an iterator that traverses over the outermost…",12,[[["self"]],["axisiter"]]],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost…",12,[[["self"]],["axisitermut"]]],[11,"axis_iter","","Return an iterator that traverses over `axis` and yields…",12,[[["self"],["axis"]],["axisiter"]]],[11,"axis_iter_mut","","Return an iterator that traverses over `axis` and yields…",12,[[["self"],["axis"]],["axisitermut"]]],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of…",12,[[["self"],["axis"],["usize"]],["axischunksiter"]]],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of…",12,[[["self"],["axis"],["usize"]],["axischunksitermut"]]],[11,"exact_chunks","","Return an exact chunks producer (and iterable).",12,[[["self"],["e"]],["exactchunks"]]],[11,"exact_chunks_mut","","Return an exact chunks producer (and iterable).",12,[[["self"],["e"]],["exactchunksmut"]]],[11,"windows","","Return a window producer and iterable.",12,[[["self"],["e"]],["windows"]]],[11,"diag","","Return an view of the diagonal elements of the array.",12,[[["self"]],["arrayview1"]]],[11,"diag_mut","","Return a read-write view over the diagonal elements of the…",12,[[["self"]],["arrayviewmut1"]]],[11,"into_diag","","Return the diagonal as a one-dimensional array.",12,[[["self"]],["arraybase",["ix1"]]]],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous…",12,[[["self"]],["bool"]]],[11,"as_ptr","","Return a pointer to the first element in the array.",12,N],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",12,N],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous…",12,[[["self"]],["option"]]],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous…",12,[[["self"]],["option"]]],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous,…",12,[[["self"]],["option"]]],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous,…",12,[[["self"]],["option"]]],[11,"into_shape","","Transform the array into `shape`; any shape with the same…",12,[[["self"],["e"]],["result",["arraybase","shapeerror"]]]],[11,"reshape","","Note: Reshape is for `ArcArray` only. Use `.into_shape()`…",12,[[["self"],["e"]],["arraybase"]]],[11,"into_dyn","","Convert any array or array view to a dynamic dimensional…",12,[[["self"]],["arraybase",["ixdyn"]]]],[11,"into_dimensionality","","Convert an array or array view to another with the same…",12,[[["self"]],["result",["arraybase","shapeerror"]]]],[11,"broadcast","","Act like a larger size and/or shape array by broadcasting…",12,[[["self"],["e"]],["option",["arrayview"]]]],[11,"swap_axes","","Swap axes `ax` and `bx`.",12,[[["self"],["usize"],["usize"]]]],[11,"permuted_axes","","Permute the axes.",12,[[["self"],["t"]],["arraybase"]]],[11,"reversed_axes","","Transpose the array by reversing axes.",12,[[["self"]],["arraybase"]]],[11,"t","","Return a transposed view of the array.",12,[[["self"]],["arrayview"]]],[11,"axes","","Return an iterator over the length and stride of each axis.",12,[[["self"]],["axes"]]],[11,"max_stride_axis","","Return the axis with the greatest stride (by absolute…",12,[[["self"]],["axis"]]],[11,"invert_axis","","Reverse the stride of `axis`.",12,[[["self"],["axis"]]]],[11,"merge_axes","","If possible, merge in the axis `take` to `into`.",12,[[["self"],["axis"],["axis"]],["bool"]]],[11,"insert_axis","","Insert new array axis at `axis` and return the result.",12,[[["self"],["axis"]],["arraybase"]]],[11,"remove_axis","","Remove array axis `axis` and return the result.",12,[[["self"],["axis"]],["arraybase"]]],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",12,[[["self"],["arraybase"]]]],[11,"fill","","Perform an elementwise assigment to `self` from element `x`.",12,[[["self"],["a"]]]],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step,…",12,[[["self"],["arraybase"],["f"]]]],[11,"fold","","Traverse the array elements and apply a fold, returning…",12,[[["self"],["b"],["f"]],["b"]]],[11,"map","","Call `f` by reference on each element and create a new…",12,[[["self"],["f"]],["array"]]],[11,"map_mut","","Call `f` on a mutable reference of each element and create…",12,[[["self"],["f"]],["array"]]],[11,"mapv","","Call `f` by value on each element and create a new array…",12,[[["self"],["f"]],["array"]]],[11,"mapv_into","","Call `f` by value on each element, update the array with…",12,[[["self"],["f"]],["self"]]],[11,"map_inplace","","Modify the array in place by calling `f` by mutable…",12,[[["self"],["f"]]]],[11,"mapv_inplace","","Modify the array in place by calling `f` by value on each…",12,[[["self"],["f"]]]],[11,"visit","","Visit each element in the array by calling `f` by…",12,[[["self"],["f"]]]],[11,"fold_axis","","Fold along an axis.",12,[[["self"],["axis"],["b"],["f"]],["array"]]],[11,"map_axis","","Reduce the values along an axis into just one value,…",12,[[["self"],["axis"],["f"]],["array"]]],[11,"map_axis_mut","","Reduce the values along an axis into just one value,…",12,[[["self"],["axis"],["f"]],["array"]]],[11,"to_vec","","Return an vector with the elements of the one-dimensional…",12,[[["self"]],["vec"]]],[11,"row","","Return an array view of row `index`.",12,[[["self"],["ix"]],["arrayview1"]]],[11,"row_mut","","Return a mutable array view of row `index`.",12,[[["self"],["ix"]],["arrayviewmut1"]]],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the…",12,[[["self"]],["usize"]]],[11,"column","","Return an array view of column `index`.",12,[[["self"],["ix"]],["arrayview1"]]],[11,"column_mut","","Return a mutable array view of column `index`.",12,[[["self"],["ix"]],["arrayviewmut1"]]],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the…",12,[[["self"]],["usize"]]],[11,"is_square","","Return true if the array is square, false otherwise.",12,[[["self"]],["bool"]]],[11,"insert_axis_inplace","","Insert new array axis of length 1 at `axis`, modifying the…",12,[[["self"],["axis"]]]],[11,"index_axis_inplace","","Collapses the array to `index` along the axis and removes…",12,[[["self"],["axis"],["usize"]]]],[11,"sum","","Return the sum of all elements in the array.",12,[[["self"]],["a"]]],[11,"scalar_sum","","Return the sum of all elements in the array.",12,[[["self"]],["a"]]],[11,"product","","Return the product of all elements in the array.",12,[[["self"]],["a"]]],[11,"sum_axis","","Return sum along `axis`.",12,[[["self"],["axis"]],["array"]]],[11,"mean_axis","","Return mean along `axis`.",12,[[["self"],["axis"]],["array"]]],[11,"var_axis","","Return variance along `axis`.",12,[[["self"],["axis"],["a"]],["array"]]],[11,"std_axis","","Return standard deviation along `axis`.",12,[[["self"],["axis"],["a"]],["array"]]],[11,"all_close","","Return `true` if the arrays' elementwise differences are…",12,[[["self"],["arraybase"],["a"]],["bool"]]],[0,"linalg","","Linear algebra.",N,N],[5,"general_mat_mul","ndarray::linalg","General matrix-matrix multiplication.",N,[[["a"],["arraybase"],["arraybase"],["a"],["arraybase"]]]],[5,"general_mat_vec_mul","","General matrix-vector multiplication.",N,[[["a"],["arraybase"],["arraybase"],["a"],["arraybase"]]]],[11,"dot","ndarray","Perform dot product or matrix multiplication of arrays…",12,N],[11,"dot","","Perform matrix multiplication of rectangular arrays `self`…",12,N],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently,…",12,[[["self"],["a"],["arraybase"]]]],[8,"Dot","ndarray::linalg","Matrix Multiplication",N,N],[16,"Output","","The result of the operation.",13,N],[10,"dot","","",13,N],[6,"Ix0","ndarray","zero-dimensionial",N,N],[6,"Ix1","","one-dimensional",N,N],[6,"Ix2","","two-dimensional",N,N],[6,"Ix3","","three-dimensional",N,N],[6,"Ix4","","four-dimensional",N,N],[6,"Ix5","","five-dimensional",N,N],[6,"Ix6","","six-dimensional",N,N],[6,"IxDyn","","dynamic-dimensional",N,N],[6,"Array0","","zero-dimensional array",N,N],[6,"Array1","","one-dimensional array",N,N],[6,"Array2","","two-dimensional array",N,N],[6,"Array3","","three-dimensional array",N,N],[6,"Array4","","four-dimensional array",N,N],[6,"Array5","","five-dimensional array",N,N],[6,"Array6","","six-dimensional array",N,N],[6,"ArrayD","","dynamic-dimensional array",N,N],[6,"ArrayView0","","zero-dimensional array view",N,N],[6,"ArrayView1","","one-dimensional array view",N,N],[6,"ArrayView2","","two-dimensional array view",N,N],[6,"ArrayView3","","three-dimensional array view",N,N],[6,"ArrayView4","","four-dimensional array view",N,N],[6,"ArrayView5","","five-dimensional array view",N,N],[6,"ArrayView6","","six-dimensional array view",N,N],[6,"ArrayViewD","","dynamic-dimensional array view",N,N],[6,"ArrayViewMut0","","zero-dimensional read-write array view",N,N],[6,"ArrayViewMut1","","one-dimensional read-write array view",N,N],[6,"ArrayViewMut2","","two-dimensional read-write array view",N,N],[6,"ArrayViewMut3","","three-dimensional read-write array view",N,N],[6,"ArrayViewMut4","","four-dimensional read-write array view",N,N],[6,"ArrayViewMut5","","five-dimensional read-write array view",N,N],[6,"ArrayViewMut6","","six-dimensional read-write array view",N,N],[6,"ArrayViewMutD","","dynamic-dimensional read-write array view",N,N],[6,"RcArray1","","one-dimensional shared ownership array",N,N],[6,"RcArray2","","two-dimensional shared ownership array",N,N],[6,"Ix","","Array index type",N,N],[6,"Ixs","","Array index type (signed)",N,N],[6,"RcArray","","An array where the data has shared ownership and is copy…",N,N],[6,"ArcArray","","An array where the data has shared ownership and is copy…",N,N],[6,"Array","","An array that owns its data uniquely.",N,N],[6,"ArrayView","","A read-only array view.",N,N],[6,"ArrayViewMut","","A read-write array view.",N,N],[8,"Dimension","","Array shape and index trait.",N,N],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`),…",14,N],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing…",14,N],[16,"Pattern","","Pattern matching friendly form of the dimension value.",14,N],[16,"Smaller","","Next smaller dimension (if applicable)",14,N],[16,"Larger","","Next larger dimension",14,N],[10,"ndim","","Returns the number of dimensions (number of axes).",14,[[["self"]],["usize"]]],[10,"into_pattern","","Convert the dimension into a pattern matching friendly…",14,N],[11,"size","","Compute the size of the dimension (number of elements)",14,[[["self"]],["usize"]]],[11,"size_checked","","Compute the size while checking for overflow.",14,[[["self"]],["option",["usize"]]]],[11,"as_array_view","","Borrow as a read-only array view.",14,[[["self"]],["arrayview1",["ix"]]]],[11,"as_array_view_mut","","Borrow as a read-write array view.",14,[[["self"]],["arrayviewmut1",["ix"]]]],[10,"zeros","","Creates a dimension of all zeros with the specified ndim.",14,[[["usize"]],["self"]]],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",14,[[["self"]],["ixdyn"]]],[10,"__private__","","This trait is private to implement; this method exists to…",14,[[["self"]],["privatemarker"]]],[8,"IntoDimension","","Argument conversion a dimension.",N,N],[16,"Dim","","",15,N],[10,"into_dimension","","",15,N],[8,"RemoveAxis","","Array shape with a next smaller dimension.",N,N],[10,"remove_axis","","",16,N],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an…",N,N],[8,"AsArray","","Argument conversion into an array view",N,N],[8,"LinalgScalar","","Elements that support linear algebra operations.",N,N],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",N,N],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows…",N,N],[16,"Dim","","",17,N],[16,"Strides","","",17,N],[10,"into_shape","","",17,[[["self"]],["shape"]]],[10,"f","","",17,[[["self"]],["shape"]]],[10,"set_f","","",17,[[["self"],["bool"]],["shape"]]],[10,"strides","","",17,N],[8,"IndexLonger","","Extra indexing methods for array views",N,N],[16,"Output","","The type of the reference to the element that is produced,…",18,N],[10,"index","","Get a reference of a element through the view.",18,N],[10,"get","","Get a reference of a element through the view.",18,[[["self"],["i"]],["option"]]],[10,"uget","","Get a reference of a element through the view without…",18,N],[8,"Data","","Array representation trait.",N,N],[16,"Elem","","The array element type.",19,N],[10,"__private__","","This trait is private to implement; this method exists to…",19,[[["self"]],["privatemarker"]]],[8,"DataMut","","Array representation trait.",N,N],[8,"DataOwned","","Array representation trait.",N,N],[8,"DataShared","","Array representation trait.",N,N],[8,"DataClone","","Array representation trait.",N,N],[8,"FixedInitializer","","Fixed-size array used for array initialization",N,N],[16,"Elem","","",20,N],[10,"as_init_slice","","",20,N],[10,"len","","",20,[[],["usize"]]],[8,"NdProducer","","A producer of an n-dimensional set of elements; for…",N,N],[16,"Item","","The element produced per iteration.",21,N],[16,"Dim","","Dimension type",21,N],[10,"__private__","","This trait is private to implement; this method exists to…",21,[[["self"]],["privatemarker"]]],[8,"IntoNdProducer","","Argument conversion into a producer.",N,N],[16,"Item","","The element produced per iteration.",22,N],[16,"Dim","","Dimension type of the producer",22,N],[16,"Output","","",22,N],[10,"into_producer","","Convert the value into an `NdProducer`.",22,N],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic…",N,N],[14,"array","","Create an `Array` with one, two or three dimensions.",N,N],[14,"s","","Slice argument constructor.",N,N],[14,"stack","","Stack arrays along the given axis.",N,N],[14,"azip","","Array zip macro: lock step function application across…",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","ndarray::iter","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"into_iter","","",29,[[["self"]],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into_iter","","",35,[[["self"]],["i"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"into_iter","","",38,[[["self"]],["i"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into_iter","","",39,[[["self"]],["i"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"into_iter","","",40,[[["self"]],["i"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into_iter","","",41,[[["self"]],["i"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"into_iter","","",42,[[["self"]],["i"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"into_iter","","",43,[[["self"]],["i"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into_iter","","",44,[[["self"]],["i"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into_iter","","",45,[[["self"]],["i"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"into_iter","","",46,[[["self"]],["i"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"_data_slice","ndarray","",26,N],[11,"into_owned","","",26,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"_data_slice","","",25,N],[11,"into_owned","","",25,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"_data_slice","","",27,N],[11,"into_owned","","",27,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"_data_slice","","",27,N],[11,"into_owned","","",27,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"ensure_unique","","",26,[[["arraybase"]]]],[11,"is_unique","","",26,[[["self"]],["bool"]]],[11,"clone_with_ptr","","",26,N],[11,"clone_with_ptr","","",25,N],[11,"clone_from_with_ptr","","",25,N],[11,"clone_with_ptr","","",27,N],[11,"new","","",25,[[["vec"]],["self"]]],[11,"into_shared","","",25,[[["self"]],["ownedrcrepr"]]],[11,"new","","",26,[[["vec"]],["self"]]],[11,"into_shared","","",26,[[["self"]],["ownedrcrepr"]]],[11,"into_dimension","","",47,[[["self"]],["ix1"]]],[11,"into_dimension","","",24,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"into_pattern","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"into_pattern","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"equal","","",23,[[["self"],["self"]],["bool"]]],[11,"size","","",23,[[["self"]],["usize"]]],[11,"size_checked","","",23,[[["self"]],["option",["usize"]]]],[11,"default_strides","","",23,[[["self"]],["self"]]],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"min_stride_axis","","",23,[[["self"],["self"]],["axis"]]],[11,"max_stride_axis","","",23,[[["self"],["self"]],["axis"]]],[11,"first_index","","",23,[[["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",23,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",23,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"equal","","",23,[[["self"],["self"]],["bool"]]],[11,"size","","",23,[[["self"]],["usize"]]],[11,"size_checked","","",23,[[["self"]],["option",["usize"]]]],[11,"last_elem","","",23,[[["self"]],["usize"]]],[11,"set_last_elem","","",23,[[["self"],["usize"]]]],[11,"default_strides","","",23,[[["self"]],["self"]]],[11,"fortran_strides","","",23,[[["self"]],["self"]]],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"min_stride_axis","","",23,[[["self"],["self"]],["axis"]]],[11,"first_index","","",23,[[["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",23,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",23,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"size","","",23,[[["self"]],["usize"]]],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",23,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",23,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",48,[[["self"]],["usize"]]],[11,"slice","","",48,N],[11,"slice_mut","","",48,N],[11,"into_pattern","","",48,N],[11,"zeros","","",48,[[["usize"]],["self"]]],[11,"insert_axis","","",48,N],[11,"try_remove_axis","","",48,N],[11,"from_dimension","","",48,[[["d2"]],["option"]]],[11,"index_checked","","",47,[[["self"],["ix1"],["ix1"]],["option",["isize"]]]],[11,"index_unchecked","","",47,[[["self"],["ix1"]],["isize"]]],[11,"index_checked","","",47,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",47,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"remove_axis","","",23,[[["self"],["axis"]],["self"]]],[11,"remove_axis","","",23,[[["self"],["axis"]],["ix0"]]],[11,"remove_axis","","",23,[[["self"],["axis"]],["ix1"]]],[11,"remove_axis","","",23,N],[11,"remove_axis","","",23,N],[11,"remove_axis","","",23,N],[11,"remove_axis","","",23,N],[11,"into_shape","","",10,[[["self"]],["shape"]]],[11,"f","","",10,[[["self"]],["self"]]],[11,"set_f","","",10,[[["self"],["bool"]],["self"]]],[11,"strides","","",10,[[["self"],["d"]],["strideshape"]]],[11,"contiguous_stride","ndarray::iter","",30,N],[11,"contiguous_stride","","",7,[[["self"]],["isize"]]],[11,"contiguous_stride","","",8,[[["self"]],["isize"]]],[11,"contiguous_stride","ndarray","",49,N],[11,"contiguous_stride","","",50,N],[11,"dot","","Compute the dot product of one-dimensional arrays.",12,[[["self"],["arraybase"]],["a"]]],[11,"dot","","Perform the matrix multiplication of the row vector `self`…",12,[[["self"],["arraybase"]],["array",["ix1"]]]],[11,"dot","","",12,[[["self"],["arraybase"]],["array2"]]],[11,"dot","","",12,[[["self"],["arraybase"]],["array",["ix1"]]]],[11,"index","","Convert a mutable array view to a mutable reference of a…",50,[[["self"],["i"]],["a"]]],[11,"get","","Convert a mutable array view to a mutable reference of a…",50,[[["self"],["i"]],["option"]]],[11,"uget","","Convert a mutable array view to a mutable reference of a…",50,[[["self"],["i"]],["a"]]],[11,"next","ndarray::iter","",29,[[["self"]],["option"]]],[11,"size_hint","","",29,N],[11,"next","","",31,[[["self"]],["option"]]],[11,"size_hint","","",31,N],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"next","","",32,[[["self"]],["option"]]],[11,"size_hint","","",32,N],[11,"fold","","",32,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,N],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"fold","","",33,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,N],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"len","","",32,[[["self"]],["usize"]]],[11,"len","","",34,[[["self"]],["usize"]]],[11,"len","","",33,[[["self"]],["usize"]]],[11,"len","","",35,[[["self"]],["usize"]]],[11,"len","","",38,[[["self"]],["usize"]]],[11,"len","","",39,[[["self"]],["usize"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"len","","",8,[[["self"]],["usize"]]],[11,"partial_cmp","ndarray","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"default","","",12,[[],["self"]]],[11,"default","","",23,[[],["dim"]]],[11,"default","","",24,[[],["ixdynimpl"]]],[11,"next_back","ndarray::iter","",29,[[["self"]],["option"]]],[11,"next_back","","",32,[[["self"]],["option"]]],[11,"rfold","","",32,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",33,[[["self"]],["option"]]],[11,"rfold","","",33,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next_back","","",40,[[["self"]],["option"]]],[11,"next_back","","",41,[[["self"]],["option"]]],[11,"eq","ndarray","",12,[[["self"],["arraybase"]],["bool"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["dim"]],["bool"]]],[11,"ne","","",23,[[["self"],["dim"]],["bool"]]],[11,"eq","","",23,[[["self"],["i"]],["bool"]]],[11,"eq","","",24,[[["self"],["ixdynimpl"]],["bool"]]],[11,"ne","","",24,[[["self"],["ixdynimpl"]],["bool"]]],[11,"eq","","",2,[[["self"],["slice"]],["bool"]]],[11,"ne","","",2,[[["self"],["slice"]],["bool"]]],[11,"eq","","",4,[[["self"],["sliceorindex"]],["bool"]]],[11,"ne","","",4,[[["self"],["sliceorindex"]],["bool"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"from","","",49,[[["slice"]],["self"]]],[11,"from","","",49,[[["arraybase"]],["self"]]],[11,"from","","",50,[[["slice"]],["self"]]],[11,"from","","",50,[[["arraybase"]],["self"]]],[11,"from","","",24,N],[11,"from","","",24,[[["vec",["ix"]]],["self"]]],[11,"from","","",51,[[["vec"]],["self"]]],[11,"from","","Converts the `Vec` of arrays to an owned 2-D array.",52,[[["vec"]],["self"]]],[11,"from","","Converts the `Vec` of arrays to an owned 3-D array.",53,[[["vec"]],["self"]]],[11,"from","","",2,[[["range",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["isize"]]],["slice"]]],[11,"from","","",2,[[["range",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["usize"]]],["slice"]]],[11,"from","","",2,[[["range",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["i32"]]],["slice"]]],[11,"from","","",4,[[["range",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["range",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["range",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["i32"]]],["sliceorindex"]]],[11,"from","","",2,[[["rangefull"]],["slice"]]],[11,"from","","",4,[[["rangefull"]],["sliceorindex"]]],[11,"from","","",4,[[["slice"]],["sliceorindex"]]],[11,"from","","",4,[[["isize"]],["sliceorindex"]]],[11,"from","","",4,[[["usize"]],["sliceorindex"]]],[11,"from","","",4,[[["i32"]],["sliceorindex"]]],[11,"from","","Create a `Shape` from `dimension`, using the default…",10,[[["d"]],["shape"]]],[11,"from","","",28,[[["t"]],["self"]]],[11,"as_ref","","",6,N],[11,"as_ref","","",6,[[["self"]],["sliceinfo"]]],[11,"into_iter","","",49,N],[11,"into_iter","","",50,N],[11,"into_iter","ndarray::iter","",30,N],[11,"into_iter","","",42,N],[11,"into_iter","","",44,N],[11,"into_iter","","",46,N],[11,"into_iter","","",36,N],[11,"into_iter","","",37,N],[11,"cmp","ndarray","",0,[[["self"],["axis"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"clone","","",23,[[["self"]],["dim"]]],[11,"clone","","",24,[[["self"]],["ixdynimpl"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","ndarray::iter","",29,[[["self"]],["self"]]],[11,"clone","ndarray","",2,[[["self"]],["slice"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"clone","ndarray::iter","",31,[[["self"]],["indicesiter"]]],[11,"clone","","",30,[[["self"]],["indices"]]],[11,"clone","","",42,[[["self"]],["self"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"clone","","",46,[[["self"]],["self"]]],[11,"clone","","",36,[[["self"]],["self"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["indexediter"]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"clone","ndarray","",9,[[["self"]],["shapeerror"]]],[11,"clone","","",3,[[["self"]],["errorkind"]]],[11,"clone","","",11,[[["self"]],["zip"]]],[11,"clone","","",5,[[["self"]],["foldwhile"]]],[11,"clone","","",25,[[["self"]],["ownedrepr"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"clone","","",27,[[["self"]],["viewrepr"]]],[11,"clone","","",12,[[["self"]],["arraybase"]]],[11,"clone_from","","`Array` implements `.clone_from()` to reuse an array's…",12,[[["self"],["self"]]]],[11,"clone","","",10,[[["self"]],["shape"]]],[11,"clone","","",28,[[["self"]],["strideshape"]]],[11,"deref","","",24,N],[11,"deref","","",6,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray::iter","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray::iter","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"add","","",23,[[["self"],["self"]],["self"]]],[11,"add","","",23,[[["self"],["ix"]],["self"]]],[11,"add","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"add","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"add","","",12,[[["self"],["b"]],["arraybase"]]],[11,"sub","","",23,[[["self"],["self"]],["self"]]],[11,"sub","","",23,[[["self"],["ix"]],["self"]]],[11,"sub","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"sub","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"sub","","",12,[[["self"],["b"]],["arraybase"]]],[11,"mul","","",23,[[["self"],["self"]],["self"]]],[11,"mul","","",23,[[["self"],["ix"]],["self"]]],[11,"mul","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"mul","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"mul","","",12,[[["self"],["b"]],["arraybase"]]],[11,"div","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"div","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"div","","",12,[[["self"],["b"]],["arraybase"]]],[11,"rem","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"rem","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"rem","","",12,[[["self"],["b"]],["arraybase"]]],[11,"neg","","Perform an elementwise negation of `self` and return the…",12,[[["self"]],["self"]]],[11,"add_assign","","",23,[[["self"],["self"]]]],[11,"add_assign","","",23,[[["self"],["self"]]]],[11,"add_assign","","",23,[[["self"],["ix"]]]],[11,"add_assign","","",12,[[["self"],["arraybase"]]]],[11,"add_assign","","",12,[[["self"],["a"]]]],[11,"sub_assign","","",23,[[["self"],["self"]]]],[11,"sub_assign","","",23,[[["self"],["self"]]]],[11,"sub_assign","","",23,[[["self"],["ix"]]]],[11,"sub_assign","","",12,[[["self"],["arraybase"]]]],[11,"sub_assign","","",12,[[["self"],["a"]]]],[11,"mul_assign","","",23,[[["self"],["self"]]]],[11,"mul_assign","","",23,[[["self"],["self"]]]],[11,"mul_assign","","",23,[[["self"],["ix"]]]],[11,"mul_assign","","",12,[[["self"],["arraybase"]]]],[11,"mul_assign","","",12,[[["self"],["a"]]]],[11,"div_assign","","",12,[[["self"],["arraybase"]]]],[11,"div_assign","","",12,[[["self"],["a"]]]],[11,"rem_assign","","",12,[[["self"],["arraybase"]]]],[11,"rem_assign","","",12,[[["self"],["a"]]]],[11,"not","","Perform an elementwise unary not of `self` and return the…",12,[[["self"]],["self"]]],[11,"bitand","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitand","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitand","","",12,[[["self"],["b"]],["arraybase"]]],[11,"bitor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitor","","",12,[[["self"],["b"]],["arraybase"]]],[11,"bitxor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitxor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitxor","","",12,[[["self"],["b"]],["arraybase"]]],[11,"shl","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shl","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shl","","",12,[[["self"],["b"]],["arraybase"]]],[11,"shr","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shr","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shr","","",12,[[["self"],["b"]],["arraybase"]]],[11,"bitand_assign","","",12,[[["self"],["arraybase"]]]],[11,"bitand_assign","","",12,[[["self"],["a"]]]],[11,"bitor_assign","","",12,[[["self"],["arraybase"]]]],[11,"bitor_assign","","",12,[[["self"],["a"]]]],[11,"bitxor_assign","","",12,[[["self"],["arraybase"]]]],[11,"bitxor_assign","","",12,[[["self"],["a"]]]],[11,"shl_assign","","",12,[[["self"],["arraybase"]]]],[11,"shl_assign","","",12,[[["self"],["a"]]]],[11,"shr_assign","","",12,[[["self"],["arraybase"]]]],[11,"shr_assign","","",12,[[["self"],["a"]]]],[11,"deref_mut","","",24,N],[11,"index","","",12,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",24,N],[11,"index_mut","","",12,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",24,N],[11,"hash","","",12,[[["self"],["h"]]]],[11,"hash","","",0,N],[11,"hash","","",23,[[["self"],["h"]]]],[11,"hash","","",2,N],[11,"hash","","",4,N],[11,"from_iter","","",12,[[["i"]],["arraybase",["ix1"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`),…",14,N],[11,"size","","Compute the size of the dimension (number of elements)",14,[[["self"]],["usize"]]],[11,"size_checked","","Compute the size while checking for overflow.",14,[[["self"]],["option",["usize"]]]],[11,"as_array_view","","Borrow as a read-only array view.",14,[[["self"]],["arrayview1",["ix"]]]],[11,"as_array_view_mut","","Borrow as a read-write array view.",14,[[["self"]],["arrayviewmut1",["ix"]]]],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",14,[[["self"]],["ixdyn"]]],[11,"zeros","","Create a new dimension value with `n` axes, all zeros",48,[[["usize"]],["ixdyn"]]],[11,"into_scalar","","Returns the single element in the array without cloning it.",54,[[["self"]],["a"]]],[11,"into_raw_vec","","Return a vector of the elements in the array, in the way…",54,[[["self"]],["vec"]]],[11,"from_shape","","Create a read-only array view borrowing its data from a…",49,N],[11,"from_shape_ptr","","Create an `ArrayView<A, D>` from shape information and a…",49,N],[11,"reborrow","","Convert the view into an `ArrayView<'b, A, D>` where `'b`…",49,[[["self"]],["arrayview"]]],[11,"split_at","","Split the array view along `axis` and return one view…",49,N],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous…",49,[[["self"]],["option"]]],[11,"from_shape","","Create a read-write array view borrowing its data from a…",50,N],[11,"from_shape_ptr","","Create an `ArrayViewMut<A, D>` from shape information and…",50,N],[11,"reborrow","","Convert the view into an `ArrayViewMut<'b, A, D>` where…",50,[[["self"]],["arrayviewmut"]]],[11,"split_at","","Split the array view along `axis` and return one mutable…",50,N],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous…",50,[[["self"]],["option"]]]],"paths":[[3,"Axis"],[3,"AxisDescription"],[3,"Slice"],[4,"ErrorKind"],[4,"SliceOrIndex"],[4,"FoldWhile"],[3,"SliceInfo"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"Zip"],[3,"ArrayBase"],[8,"Dot"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"ShapeBuilder"],[8,"IndexLonger"],[8,"Data"],[8,"FixedInitializer"],[8,"NdProducer"],[8,"IntoNdProducer"],[3,"Dim"],[3,"IxDynImpl"],[3,"OwnedRepr"],[3,"OwnedArcRepr"],[3,"ViewRepr"],[3,"StrideShape"],[3,"Axes"],[3,"Indices"],[3,"IndicesIter"],[3,"Iter"],[3,"IterMut"],[3,"IndexedIter"],[3,"IndexedIterMut"],[3,"Lanes"],[3,"LanesMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksMut"],[3,"ExactChunksIterMut"],[3,"Windows"],[6,"Ix"],[6,"IxDyn"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Array1"],[6,"Array2"],[6,"Array3"],[6,"Array"]]};
searchIndex["num_complex"]={"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[3,"ParseComplexError","","",N,N],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[11,"new","","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't…",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an…",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of…",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of…",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"eq","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"]],["result"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["self"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"hash","","",0,N],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"default","","",0,[[],["complex"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"to_usize","","",0,[[["self"]],["option",["usize"]]]],[11,"to_isize","","",0,[[["self"]],["option",["isize"]]]],[11,"to_u8","","",0,[[["self"]],["option",["u8"]]]],[11,"to_u16","","",0,[[["self"]],["option",["u16"]]]],[11,"to_u32","","",0,[[["self"]],["option",["u32"]]]],[11,"to_u64","","",0,[[["self"]],["option",["u64"]]]],[11,"to_i8","","",0,[[["self"]],["option",["i8"]]]],[11,"to_i16","","",0,[[["self"]],["option",["i16"]]]],[11,"to_i32","","",0,[[["self"]],["option",["i32"]]]],[11,"to_i64","","",0,[[["self"]],["option",["i64"]]]],[11,"to_u128","","",0,[[["self"]],["option",["u128"]]]],[11,"to_i128","","",0,[[["self"]],["option",["i128"]]]],[11,"to_f32","","",0,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",0,[[["self"]],["option",["f64"]]]],[11,"from_usize","","",0,[[["usize"]],["option"]]],[11,"from_isize","","",0,[[["isize"]],["option"]]],[11,"from_u8","","",0,[[["u8"]],["option"]]],[11,"from_u16","","",0,[[["u16"]],["option"]]],[11,"from_u32","","",0,[[["u32"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_i8","","",0,[[["i8"]],["option"]]],[11,"from_i16","","",0,[[["i16"]],["option"]]],[11,"from_i32","","",0,[[["i32"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from","","",0,[[["u"]],["option"]]],[11,"as_","","",0,[[["self"]],["u"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"],["u32"]],["result"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"inv","","",0,[[["self"]],["complex"]]]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",N,N],[12,"kind","","",0,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",1,N],[13,"Invalid","","",1,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"bounds","","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",2,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast","num_traits","",N,N],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",3,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",3,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",3,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",3,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",3,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",3,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",3,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",3,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",3,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",3,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",3,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",3,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",3,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",3,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this…",4,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",4,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",4,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",4,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",4,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",4,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",4,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",4,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",4,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",4,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",4,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",4,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",4,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",4,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted…",5,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[["self"]],["t"]]],[0,"float","num_traits","",N,N],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",N,N],[10,"infinity","","Returns positive infinity.",7,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",7,[[],["self"]]],[10,"nan","","Returns NaN.",7,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",7,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",7,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",7,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",7,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",8,[[],["self"]]],[10,"infinity","","Returns the infinite value.",8,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",8,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",8,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",8,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",8,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",8,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",8,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",8,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",8,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",8,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",8,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",8,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",8,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",8,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",8,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",8,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",8,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",8,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",8,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",8,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",8,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",8,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",8,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",8,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",8,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",8,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",8,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",8,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",8,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",8,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",8,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",8,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",8,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",8,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",8,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",8,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",8,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",8,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",9,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",9,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[],["self"]]],[0,"identities","num_traits","",N,N],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[["self"]],["bool"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[["self"],["u32"]],["self"]]],[0,"ops","num_traits","",N,N],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",14,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",15,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",16,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",17,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",18,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",19,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",20,[[["self"],["u32"]],["option"]]],[0,"inv","num_traits::ops","",N,N],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",N,N],[16,"Output","","The result after applying the operator.",21,N],[10,"inv","","Returns the multiplicative inverse of `self`.",21,N],[0,"mul_add","num_traits::ops","",N,N],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",22,N],[10,"mul_add","","Performs the fused multiply-add operation.",22,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[["self"],["a"],["b"]]]],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",24,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",24,[[["self"],["self"]],["self"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",25,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",26,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",27,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",28,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",29,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",N,[[["t"],["usize"]],["option"]]],[8,"Pow","","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",30,N],[10,"pow","","Returns `self` to the power `rhs`.",30,N],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",N,N],[10,"min_value","","Returns the smallest finite value that this type can…",31,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",31,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",31,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",31,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",31,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",31,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",31,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",31,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",31,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",31,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",31,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",31,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",31,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",31,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",31,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",31,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",31,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",31,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",31,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",31,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",31,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",31,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",31,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",31,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",31,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",31,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",31,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",31,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",31,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",31,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",31,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",31,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",31,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",31,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",31,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",31,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",31,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",31,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",31,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",31,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",31,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",31,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",31,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",31,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",31,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",31,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",31,[[["self"]],["self"]]],[0,"sign","num_traits","",N,N],[5,"abs","num_traits::sign","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",N,N],[10,"abs","","Computes the absolute value.",32,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",32,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",32,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",32,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",32,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",N,N],[16,"FromStrRadixErr","","",33,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",33,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric…",N,N],[8,"RefNum","","The trait for references which implement numeric…",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex["rawpointer"]={"doc":"","items":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to…",N,N],[8,"PointerExt","","Extension methods for raw pointers",N,N],[10,"offset","","",0,[[["self"],["isize"]],["self"]]],[11,"pre_inc","","Increment the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_inc","","Increment the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"pre_dec","","Decrement the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_dec","","Decrement the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"inc","","Increment by 1",0,[[["self"]]]],[11,"dec","","Decrement by 1",0,[[["self"]]]],[11,"stride_offset","","Offset the pointer by `s` multiplied by `index`.",0,[[["self"],["isize"],["usize"]],["self"]]]],"paths":[[8,"PointerExt"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
